4k2 demonstrates concurrent XML xpath extraction. By Artur Skonecki.

Requirements
============
mpi4py pyzmq sqlalchemy

apt-get install openmpi-bin libopenmpi-dev build-essentials python-dev python-zmq python-lxml python-sqlalchemy python-pip
pip install mpi4py


Deployment
==========

Start server:
mpirun -np 4 --hostfile ~/hostfile python server.py
Send requests to server.py:
python client.py \
-H <server address> \
-f http://feeds.feedburner.com/TechCrunch \
-n 2,5,6,9,10 -s category[1]

Output:

Sending request {"url": "http://feeds.feedburner.com/TechCrunch", "xpath": "category[1]", "article_nums": [2, 5, 6, 9, 10]}
TExtract(u'http://feeds.feedburner.com/TechCrunch', u'category[1]', [TContent(u'Fundings & Exits')])
TExtract(u'http://feeds.feedburner.com/TechCrunch', u'category[1]', [TContent(u'Startups')])
TExtract(u'http://feeds.feedburner.com/TechCrunch', u'category[1]', [TContent(u'Social')])
TExtract(u'http://feeds.feedburner.com/TechCrunch', u'category[1]', [TContent(u'Enterprise')])
TExtract(u'http://feeds.feedburner.com/TechCrunch', u'category[1]', [TContent(u'TC')])

Hacking
=======

*server.py*
A program serving extracts of contents of articles in rss feed over zmq
sockets using json as data format.  This implementation uses MPI for
speeding up execution so it is taking advantage of concurrency features
of modern systems.

*client.py*
An implementation of a client:
- request from server extracts of contents of articles in rss feed
- fetch the response
- write results to a dummy database:
  TExtract( url, xpath, contents ) |one-to-many| TContent( content )
- print out database
Uses json as data format.
ZeroMQ is deployed for communication between client and server.
SQLAlchemy for database access.

*dbsupport.py*
A file containing classes implementing access to databases through SqlAlchemy.
